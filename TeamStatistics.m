function tableout = importfile(workbookFile,sheetName,endRow)
%IMPORTFILE2 Import data from a spreadsheet
%   [Team,Span,Mat,Won,Lost,Tied,NR,WL,Ave,RPO,Inns,HS,LS,VarName14] =
%   IMPORTFILE2(FILE) reads data from the first worksheet in the Microsoft
%   Excel spreadsheet file named FILE and returns the data as column
%   vectors.
%
%   [Team,Span,Mat,Won,Lost,Tied,NR,WL,Ave,RPO,Inns,HS,LS,VarName14] =
%   IMPORTFILE2(FILE,SHEET) reads from the specified worksheet.
%
%   [Team,Span,Mat,Won,Lost,Tied,NR,WL,Ave,RPO,Inns,HS,LS,VarName14] =
%   IMPORTFILE2(FILE,SHEET,STARTROW,ENDROW) reads from the specified
%   worksheet for the specified row interval(s). Specify STARTROW and
%   ENDROW as a pair of scalars or vectors of matching size for
%   dis-contiguous row intervals. To read to the end of the file specify an
%   ENDROW of inf.
%
%	Non-numeric cells are replaced with: 0.0
%
% Example:
%   [Team,Span,Mat,Won,Lost,Tied,NR,WL,Ave,RPO,Inns,HS,LS,VarName14] =
%   importfile2('Data1.xlsx','All',1,28);
%
%   See also XLSREAD.

% Auto-generated by MATLAB on 2019/03/04 22:56:13

%% Input handling

% If no sheet is specified, read first sheet
startRow=2;

workbookFile=['Data' workbookFile];
%% Import the data
[~, ~, raw] = xlsread(workbookFile, sheetName, sprintf('A%d:N%d',startRow(1),endRow(1)));
for block=2:length(startRow)
    [~, ~, tmpRawBlock] = xlsread(workbookFile, sheetName, sprintf('A%d:N%d',startRow(block),endRow(block)));
    raw = [raw;tmpRawBlock]; %#ok<AGROW>
end
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
cellVectors = raw(:,[1,2,14]);
raw = raw(:,[3,4,5,6,7,8,9,10,11,12,13]);


%% Create output variable
R = cellfun(@(x) (~isnumeric(x) && ~islogical(x)) || isnan(x),raw); % Find non-numeric cells
raw(R) = {0.0}; % Replace non-numeric cells
data = reshape([raw{:}],size(raw));


%% Create table
tableout=table;
%% Allocate imported array to column variable names
tableout.Team = cellVectors(:,1);
tableout.Span = cellVectors(:,2);
tableout.Mat = data(:,1);
tableout.Won = data(:,2);
tableout.Lost = data(:,3);
tableout.Tied = data(:,4);
tableout.NR = data(:,5);
tableout.WL = data(:,6);
tableout.Ave = data(:,7);
tableout.RPO = data(:,8);
tableout.Inns = data(:,9);
tableout.HS = data(:,10);
tableout.LS = data(:,11);
tableout.VarName14 = cellVectors(:,3);

%%
WC_Teams=['South Africa' 'Sri Lanka' 'New Zealand' 'Bangladesh' 'Afghanistan' 'India' 'England' 'Pakistan' 'West Indies' 'Australia'];
tempTable=tableout;
row=[];
for i=1:length(temptable.Team)
    me_idx=index(contains(WC_Teams,tempTable.team(i)),1);
    if isempty(me_index)
        continue;
    else
        row(me_index)=i;
    end
end
for i=1:10;
    if (row(i)==0)
        newRow(1,1).Team=WC_Teams(i);
        newRow(1,1).Span = '';
newRow(1,1).Mat = 0;
newRow(1,1).Won = 0;
newRow(1,1).Lost = 0;
newRow(1,1).Tied = 0;
newRow(1,1).NR = 0;
newRow(1,1).WL = 0;
newRow(1,1).Ave = 0;
newRow(1,1).RPO = 0;
newRow(1,1).Inns = 0;
newRow(1,1).HS = 0;
newRow(1,1).LS = 0;
if (i==1)
    tableout=struct2table(newRow,'AsArray',true);
else
    tableout=[tableout;struct2table(newRow,'AsArray',true);];
end
    elseif i==1
        tableout=tempTable(row(i),:);
    else
        tableout=[tableout;tempTable(row(i),:)];
    end
end
WinPer=tableout.Won ./(tableout.Mat-tableout.NR);
LossPer=tableout.Lost ./(tableout.Mat-tableout.NR);
TiePer=tableout.Tied ./(tableout.Mat-tableout.NR);

Result_Avg=[WinPer LossPer TiePer];
indexNaN=find(isnan(WinPer));
if -isempty(indexNaN)
    for i=1:length(index(NaN)
        Result_Avg(indexNaN(i),:)=[0.4 0.4 0.2];
    end
end
%%
indexZero=find(WinPer==0)
if -isempty(indexZero)
    for i=1:length(indexZero)
        Rseult_Avg(indexZero(i),:)=[0.01 0.99 0];
    end 
end
indexOne=find(WinPer==1)
if -isempty(indexOne)
     for i=1:length(indexOne)
        Rseult_Avg(indexOne(i),:)=[0.99 0.01 0];
    end 
end
