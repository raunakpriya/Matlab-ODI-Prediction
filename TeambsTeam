function [tab]= dataimportTvTWC(workbookFile,sheetName,endRow)
%IMPORTFILE3 Import data from a spreadsheet
%   [Team1,Span1,Mat1,Won1,Lost1,Tied1,NR1,WL1,Ave1,RPO1,Inns1,HS1,LS1,VarName1]
%   = IMPORTFILE3(FILE) reads data from the first worksheet in the
%   Microsoft Excel spreadsheet file named FILE and returns the data as
%   column vectors.
%
%   [Team1,Span1,Mat1,Won1,Lost1,Tied1,NR1,WL1,Ave1,RPO1,Inns1,HS1,LS1,VarName1]
%   = IMPORTFILE3(FILE,SHEET) reads from the specified worksheet.
%
%   [Team1,Span1,Mat1,Won1,Lost1,Tied1,NR1,WL1,Ave1,RPO1,Inns1,HS1,LS1,VarName1]
%   = IMPORTFILE3(FILE,SHEET,STARTROW,ENDROW) reads from the specified
%   worksheet for the specified row interval(s). Specify STARTROW and
%   ENDROW as a pair of scalars or vectors of matching size for
%   dis-contiguous row intervals. To read to the end of the file specify an
%   ENDROW of inf.
%
%	Non-numeric cells are replaced with: NaN
%
% Example:
%   [Team1,Span1,Mat1,Won1,Lost1,Tied1,NR1,WL1,Ave1,RPO1,Inns1,HS1,LS1,VarName1]
%   = importfile3('Data3.xlsx','Sheet1',1,241);
%
%   See also XLSREAD.

% Auto-generated by MATLAB on 2019/03/05 00:49:17

%% Input handling

% If no sheet is specified, read first sheet
startRow=2;

%% Import the data
[~, ~, raw] = xlsread(workbookFile, sheetName, sprintf('A%d:N%d',startRow(1),endRow(1)));
for block=2:length(startRow)
    [~, ~, tmpRawBlock] = xlsread(workbookFile, sheetName, sprintf('A%d:N%d',startRow(block),endRow(block)));
    raw = [raw;tmpRawBlock]; %#ok<AGROW>
end
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
cellVectors = raw(:,[1,14]);
raw = raw(:,[2,3,4,5,6,7,8,9,10,1 1,12,13]);



%% Create output variable
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells
data = reshape([raw{:}],size(raw));
%% Create table
tableout=table;
%% Allocate imported array to column variable names
tableout.Team1 = cellVectors(:,1);
tableout.Span1 = data(:,1);
tableout.Mat1 = data(:,2);
tableout.Won1 = data(:,3);
tableout.Lost1 = data(:,4);
tableout.Tied1 = data(:,5);
tableout.NR1 = data(:,6);
tableout.WL1 = data(:,7);
tableout.Ave1 = data(:,8);
tableout.RPO1 = data(:,9);
tableout.Inns1 = data(:,10);
tableout.HS1 = data(:,11);
tableout.LS1 = data(:,12);

%%
len=size(tableout,1);
for 2:2:len
    newRow(1,i/2).Opposition=tableout.Team1(i,1)(3:end);
end

T1=tableout([1:2:end],:);
T2=struct2table(newRow,'AsArray',true);
T = [T1(:,1) T2 T1(:2:end)];
%%
tab=0.01*ones(10,10);
WC_Teams=['South Africa' 'Sri Lanka' 'New Zealand' 'Bangladesh' 'Afghanistan' 'India' 'England' 'Pakistan' 'West Indies' 'Australia'];
for i=1:nume1(T.Team)
    if -strcmp(T.Team(i),'');
        me_idx=find(contains(WC_Teams,T.Team(i),1);
    end
    if isempty(me_idx)
        continue;
    else
        vs_idx=find(contains(WC_Teams,T.Opposition(i),1);
        if isempty(vs_idx)
            continue;
        else
            val=(T.Won(i)+0.5*T.Tied(i))/(T.Mat(i)-T.NR(i));
            if val==0
                val=0.01;
            elseif val==1
                val=0.99;
            elseif isinf(val)
                val=0.33;
            elseif isnan(val)
                val=0.33;
            end
            tab(me_idx,vs_idx)=val;
        end
    end
end
